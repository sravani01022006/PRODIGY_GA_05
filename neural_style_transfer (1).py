# -*- coding: utf-8 -*-
"""Neural Style Transfer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1myG1ot5tbuLhOYGa8JAKQQA3RaHjkaXF
"""

!pip install torch torchvision

from google.colab import files
files.upload()

from PIL import Image
import matplotlib.pyplot as plt
import torchvision.transforms as transforms
import torch

def image_loader(image_name, imsize):
    loader = transforms.Compose([
        transforms.Resize((imsize, imsize)),
        transforms.CenterCrop(imsize),
        transforms.ToTensor()
    ])
    image = Image.open(image_name).convert('RGB')
    image = loader(image).unsqueeze(0)
    return image.to(torch.float)

imsize = 256

content_img = image_loader("content2.jpg", imsize)
style_img = image_loader("style2.jpg", imsize)

def imshow(tensor, title=None):
    image = tensor.cpu().clone().squeeze(0)
    image = transforms.ToPILImage()(image)
    plt.imshow(image)
    if title:
        plt.title(title)
    plt.axis("off")
    plt.show()

imshow(content_img, "Content Image")
imshow(style_img, "Style Image")

import torch.nn as nn
import torch.optim as optim
import torchvision.models as models
import copy

cnn = models.vgg19(pretrained=True).features.eval()

class ContentLoss(nn.Module):
    def __init__(self, target):
        super(ContentLoss, self).__init__()
        self.target = target.detach()
    def forward(self, x):
        self.loss = nn.functional.mse_loss(x, self.target)
        return x

def gram_matrix(input):
    a, b, c, d = input.size()
    features = input.view(a * b, c * d)
    G = torch.mm(features, features.t())
    return G.div(a * b * c * d)

class StyleLoss(nn.Module):
    def __init__(self, target_feature):
        super(StyleLoss, self).__init__()
        self.target = gram_matrix(target_feature).detach()
    def forward(self, x):
        G = gram_matrix(x)
        self.loss = nn.functional.mse_loss(G, self.target)
        return x

content_layers = ['conv_4']
style_layers = ['conv_1', 'conv_2', 'conv_3', 'conv_4', 'conv_5']

content_losses = []
style_losses = []

model = nn.Sequential()
i = 0

for layer in cnn.children():
    if isinstance(layer, nn.Conv2d):
        i += 1
        name = f"conv_{i}"
    elif isinstance(layer, nn.ReLU):
        name = f"relu_{i}"
        layer = nn.ReLU(inplace=False)
    elif isinstance(layer, nn.MaxPool2d):
        name = f"pool_{i}"
    elif isinstance(layer, nn.BatchNorm2d):
        name = f"bn_{i}"

    model.add_module(name, layer)

    if name in content_layers:
        target = model(content_img).detach()
        content_loss = ContentLoss(target)
        model.add_module(f"content_loss_{i}", content_loss)
        content_losses.append(content_loss)

    if name in style_layers:
        target_feature = model(style_img).detach()
        style_loss = StyleLoss(target_feature)
        model.add_module(f"style_loss_{i}", style_loss)
        style_losses.append(style_loss)

for j in range(len(model) - 1, -1, -1):
    if isinstance(model[j], ContentLoss) or isinstance(model[j], StyleLoss):
        break
model = model[:j + 1]

input_img = content_img.clone()
optimizer = optim.LBFGS([input_img.requires_grad_()])

print("Running style transfer...")
run = [0]
while run[0] <= 300:
    def closure():
        input_img.data.clamp_(0, 1)
        optimizer.zero_grad()
        model(input_img)
        style_score = sum(sl.loss for sl in style_losses)
        content_score = sum(cl.loss for cl in content_losses)
        loss = style_score * 1000000 + content_score
        loss.backward()
        run[0] += 1
        return loss

    optimizer.step(closure)

input_img.data.clamp_(0, 1)
imshow(input_img, "Final Output Image")

output = transforms.ToPILImage()(input_img.squeeze(0))
output.save("styled_output2.png")

from google.colab import files
files.download("styled_output2.png")